/** * Uses the text layers of a PSD and creates a FOFNT file for use with * FOnline: Reloaded.  * * NOTES: *  - The " " space character isn't picked up in the final output, so *  you should edit the final file and make sure the " " character is *  wide enough for your tastes. */// ExtendScript doesn't support Array.prototype.indexOf; polyfill from MDNif (!Array.prototype.indexOf) {  Array.prototype.indexOf = function (searchElement , fromIndex) {    var i,        pivot = (fromIndex) ? fromIndex : 0,        length;    if (!this) {      throw new TypeError();    }    length = this.length;    if (length === 0 || pivot >= length) {      return -1;    }    if (pivot < 0) {      pivot = length - Math.abs(pivot);    }    for (i = pivot; i < length; i++) {      if (this[i] === searchElement) {        return i;      }    }    return -1;  };}// Translation list of character codesvar trans = {	//TODO not sure what these are for?	"": 19,	"": 20,	"": 21,	"": 24,	"": 25,	" ": 32,	"!": 33,	'"': 34,	"#": 35,	"$": 36,	"%": 37,	"&": 38,	"'": 39,	"(": 40,	")": 41,	"*": 42,	"+": 43,	",": 44,	"-": 45,	".": 46,	"/": 47,	"0": 48,	"1": 49,	"2": 50,	"3": 51,	"4": 52,	"5": 53,	"6": 54,	"7": 55,	"8": 56,	"9": 57,	":": 58,	";": 59,	"<": 60,	"=": 61,	">": 62,	"?": 63,	"@": 64,	"A": 65,	"B": 66,	"C": 67,	"D": 68,	"E": 69,	"F": 70,	"G": 71,	"H": 72,	"I": 73,	"J": 74,	"K": 75,	"L": 76,	"M": 77,	"N": 78,	"O": 79,	"P": 80,	"Q": 81,	"R": 82,	"S": 83,	"T": 84,	"U": 85,	"V": 86,	"W": 87,	"X": 88,	"Y": 89,	"Z": 90,	"[": 91,	"\\": 92,	"]": 93,	"^": 94,	"_": 95,	"`": 96,	"a": 97,	"b": 98,	"c": 99,	"d": 100,	"e": 101,	"f": 102,	"g": 103,	"h": 104,	"i": 105,	"j": 106,	"k": 107,	"l": 108,	"m": 109,	"n": 110,	"o": 111,	"p": 112,	"q": 113,	"r": 114,	"s": 115,	"t": 116,	"u": 117,	"v": 118,	"w": 119,	"x": 120,	"y": 121,	"z": 122,	"{": 123,	"|": 124,	"}": 125,	"~": 126,	// TODO Not sure what these do	"": 130,	"": 131,	"": 132,	"": 133,	"": 134,	"": 135,	"": 136,	"": 137,	"": 138,	"": 139,	"": 140,	"": 145,	"": 146,	"": 147,	"": 148,	"": 149,	"": 150,	"": 151,	"": 152,	"": 153,	"": 154,	"": 155,	"": 156,	"": 159,	"¡": 161,	"¢": 162,	"£": 163,	"¤": 164,	"¥": 165,	"¦": 166,	"§": 167,	"¨": 168,	"©": 169,	"ª": 170,	"«": 171,	"¬": 172,	"­": 173,	"®": 174,	"¯": 175,	"°": 176,	"±": 177,	"²": 178,	"³": 179,	"´": 180,	"µ": 181,	"¶": 182,	"·": 183,	"¸": 184,	"¹": 185,	"º": 186,	"»": 187,	"¼": 188,	"½": 189,	"¾": 190,	"¿": 191,	"À": 192,	"Á": 193,	"Â": 194,	"Ã": 195,	"Ä": 196,	"Å": 197,	"Æ": 198,	"Ç": 199,	"È": 200,	"É": 201,	"Ê": 202,	"Ë": 203,	"Ì": 204,	"Í": 205,	"Î": 206,	"Ï": 207,	"Ð": 208,	"Ñ": 209,	"Ò": 210,	"Ó": 211,	"Ô": 212,	"Õ": 213,	"Ö": 214,	"×": 215,	"Ø": 216,	"Ù": 217,	"Ú": 218,	"Û": 219,	"Ü": 220,	"Ý": 221,	"Þ": 222,	"ß": 223,	"à": 224,	"á": 225,	"â": 226,	"ã": 227,	"ä": 228,	"å": 229,	"æ": 230,	"ç": 231,	"è": 232,	"é": 233,	"ê": 234,	"ë": 235,	"ì": 236,	"í": 237,	"î": 238,	"ï": 239,	"ð": 240,	"ñ": 241,	"ò": 242,	"ó": 243,	"ô": 244,	"õ": 245,	"ö": 246,	"÷": 247,	"ø": 248,	"ù": 249,	"ú": 250,	"û": 251,	"ü": 252,	"ý": 253,	"þ": 254,	"ÿ": 255};// Get the layers from the active PSDvar layers = app.activeDocument.layers;// Allocate some things for my own sanityvar letters = [];var x, y, l, w, h;// Try to find a good height for your letters - 11 was good on an 18px fontvar maxHeight = 11;// Template that gets applied for each lettervar tpl = [    "Letter {code} # '{name}'",    "  PositionX {x}",    "  PositionY {y}",    "  Width     {w}",    "  Height    {h}",    "  XAdvance  {xa}",    "  OffsetY  {oy}"].join('\n');// These letters need additional OffsetYvar descenders = ['y', 'j', 'p', 'q', 'g'];// Additional px to subtract for descendersvar descenderAdd = -3; // Final outputvar o = '';// Set true to find the tallest letter (excluding descenders)var findTallest = false;var tallest = {    name: '',    h: 0};for(var i = layers.length; i--;){    l = {};    	// Ignore hidden layers    if(layers[i].visible)    {        l.name = layers[i].name;		// Ignore letters that don't have a translation        if(!trans[l.name])            continue;            		// IDK why, but parseInt just once isn't enough for ExtendScript        l.x = parseInt(layers[i].bounds[0], 10);        l.y = parseInt(layers[i].bounds[1], 10);        l.w = parseInt(layers[i].bounds[2], 10) - parseInt(l.x, 10);        l.h = parseInt(layers[i].bounds[3], 10) - parseInt(l.y, 10);        l.code = trans[l.name];        l.xa = l.w + 1;        l.oy = l.h - maxHeight;                if(findTallest)        {            if(!!~descenders.indexOf(layers[i].name))                continue;                           tallest = l.h > tallest.h ? {name: l.name, h: l.h } : tallest;            continue;        }                		// Apply additional OffsetY here        if(!!~descenders.indexOf(l.name))            l.oy += descenderAdd;        		// Apply values to the template, append to output        o += applyTpl(tpl, l);    }}if(findTallest){        alert('Tallest letter is ' + tallest.name + ' at height ' + tallest.h);}else{    // Begin file operations    var f = File.saveDialog('Specify an FOFNT file');    if(f != null)    {        if(f.open('w', 'TEXT', '???'))        {            f.write(o);            f.close();         }        else            alert("Could not open file for writing");    }    else    {        alert("Error opening FOFNT file, nothing saved");    }}/** * @function Apply a set of values to a template * @param String template The template to use * @param Object an object of key/value pairs to apply to the template * @return String returns the new template */function applyTpl(template, values){       	var x;	for(x in values)	{		var r;		if(values.hasOwnProperty(x))		{			r = new RegExp('{' + x + '}', 'g');			if(template.match(r))			{				template = template.replace(r, values[x]);			}		}	}		return template + '\n\n';}